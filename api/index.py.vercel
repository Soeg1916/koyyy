"""
Simplified Vercel serverless function for Telegram bot webhook.
Optimized for serverless execution with minimal dependencies.
"""
import os
import json
import logging
import traceback
from flask import Flask, request, jsonify

# Configure basic logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Initialize Flask app
app = Flask(__name__)

# Initialize bot in a way that's compatible with serverless
token = os.environ.get("TELEGRAM_BOT_TOKEN")
if not token:
    logger.error("No TELEGRAM_BOT_TOKEN set in environment variables")

# We'll import the bot only when needed to reduce cold start time
bot = None

def get_bot():
    """Lazy-load the bot to improve cold start time."""
    global bot
    if bot is None:
        try:
            import telebot
            from bot import create_bot
            bot = create_bot(token)
            from user_storage import initialize_user_storage
            initialize_user_storage()
            logger.info("Bot initialized successfully")
        except Exception as e:
            logger.error(f"Error initializing bot: {str(e)}")
            logger.error(traceback.format_exc())
    return bot

@app.route('/', methods=['GET'])
def home():
    """Health check endpoint."""
    return jsonify({
        "status": "alive", 
        "service": "Telegram Bot Webhook",
        "env_vars_set": bool(token)
    })

@app.route('/webhook', methods=['POST'])
def webhook():
    """Process webhook updates from Telegram."""
    try:
        # Only load the bot and all dependencies when needed
        current_bot = get_bot()
        if not current_bot:
            return jsonify({"error": "Bot not initialized. Missing TELEGRAM_BOT_TOKEN"}), 500
            
        if request.headers.get('content-type') == 'application/json':
            import telebot
            json_string = request.get_data().decode('utf-8')
            update = telebot.types.Update.de_json(json_string)
            current_bot.process_new_updates([update])
            return jsonify({"status": "success"})
        else:
            return jsonify({"error": "Invalid content type"}), 400
    except Exception as e:
        logger.error(f"Error processing update: {str(e)}")
        logger.error(traceback.format_exc())
        return jsonify({"error": str(e)}), 500

@app.route('/set-webhook', methods=['GET'])
def set_webhook():
    """Set webhook URL for the bot."""
    try:
        # Get custom URL or construct from request
        url = request.args.get('url')
        if not url:
            host = request.headers.get('x-forwarded-host', request.host)
            proto = request.headers.get('x-forwarded-proto', 'https')
            url = f"{proto}://{host}/api/webhook"
            
        # Only load the bot when needed
        current_bot = get_bot()
        if not current_bot:
            return jsonify({"error": "Bot not initialized. Missing TELEGRAM_BOT_TOKEN"}), 500
            
        # Set the webhook
        current_bot.remove_webhook()
        current_bot.set_webhook(url=url)
        return jsonify({
            "success": True,
            "webhook_url": url
        })
    except Exception as e:
        logger.error(f"Error setting webhook: {str(e)}")
        logger.error(traceback.format_exc())
        return jsonify({"error": str(e)}), 500

@app.route('/test', methods=['GET'])
def test():
    """Test endpoint to verify the API is working."""
    return jsonify({
        "status": "ok",
        "message": "Telegram bot API is working"
    })

# Simplified handler for Vercel serverless functions
def handler(event, context):
    """Simplified handler for Vercel serverless functions."""
    try:
        # Print debugging info
        logger.info(f"Event received: {json.dumps(event)[:200]}")
        
        # Vercel serverless function handler
        return app(event, context)
    except Exception as e:
        logger.error(f"Handler error: {str(e)}")
        logger.error(traceback.format_exc())
        return {
            "statusCode": 500,
            "body": json.dumps({"error": str(e)})
        }